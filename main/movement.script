function init(self)
	msg.post(".", "acquire_input_focus")
	self.pos =vmath.vector3(0,0,0)
	rot = go.get_rotation()
	rotation_speed = 1
	print(rot)
	self.count = 0
	self.rotation =0
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	self.pos = self.pos*dt
	go.set_position(self.pos)
	self.rot =self.rotation* dt
	
	
end

function fixed_update(self, dt)
	-- This function is only called if 'Use Fixed Timestep' is enabled in the Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash("Up") then
		self.pos = go.get_position()+vmath.vector3(0,-10,0)
	
	elseif action_id == hash("Left") then
		
		self.rotate =vmath.quat_rotation_z(0.1)
		go.set_rotation(go.get_rotation()*self.rotate)
		self.count = self.count + math.pi *0
		print(self.count)
	elseif action_id == hash("Right") then

			self.rotate =vmath.quat_rotation_z(-0.1)
			go.set_rotation(go.get_rotation()*self.rotate)
			self.count = self.count + math.pi *0
			print(self.count)
		
	end
end
function axisAngleToQuaternion(axis, angle)
	local u = vmath.normalize(axis)-- Normalize the axis vector
	local sinHalfAngle = math.sin(angle / 2)
	local cosHalfAngle = math.cos(angle / 2)
	local w = cosHalfAngle
	local x = u.x * sinHalfAngle
	local y = u.y * sinHalfAngle
	local z = u.z * sinHalfAngle
	return vmath.quat(x, y, z, w) -- Return the quaternion
end
function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
