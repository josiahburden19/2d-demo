local camera = require "orthographic.camera"
local move_up = hash("move_up")
local move_down = hash("move_down")
local move_left = hash("move_left")
local move_right = hash("move_right")

 animation_idle = hash("idle")

function init(self)
	msg.post(".", "acquire_input_focus")
	self.current_animation = nil
	self.SPEED =40
	msg.post('.', 'start_camera')
	self.rotated_vector = vmath.vector3(0,0,0)
	self.animation = nil
	
end
function update(self, dt)
	self.dt = dt
	

	local animation = animation_idle
	if self.rotated_vector.y > 0  then
		animation = move_up
	elseif self.rotated_vector.y <0  then
		animation = move_down
	end
	if animation ~= self.current_animation then
		msg.post("#sprite", "play_animation", { id = animation })
		self.current_animation = animation
		
	end
	
		

end

function on_message(self, message_id, message, sender)
	if message_id == hash('start_camera') then
		camera.follow(go.get_id('camera'), go.get_id(), {})
	end
end

function on_input(self, action_id, action)
	if action_id == hash("Up") then
		self.rotated_vector =  vmath.rotate(go.get_rotation(),vmath.vector3(0,10,0)*self.SPEED)
		print(self.rotated_vector)
		self.direction = go.get_position()+ self.rotated_vector* self.dt

		go.set_position(self.direction) 
	elseif action_id == hash("Left") then
		self.direction = go.get_rotation()*vmath.quat_rotation_z(10*self.dt)
		go.set_rotation(self.direction)
	elseif action_id == hash("Right") then
		self.direction = go.get_rotation()*vmath.quat_rotation_z(-10*self.dt)
		go.set_rotation(self.direction)
	elseif action_id == hash("Down") then
		   
		
		
		self.rotated_vector =  vmath.rotate(go.get_rotation(),vmath.vector3(0,-10,0)*self.SPEED)
		print(self.rotated_vector)
		go.set_position(go.get_position()+ self.rotated_vector* self.dt )
	end
end