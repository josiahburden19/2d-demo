local camera = require "orthographic.camera"
animation_idle = hash("idle")
function init(self)
	msg.post(".", "acquire_input_focus")
	go.property('camera_world_bounds', vmath.vector4())
	update_camera_bounds(self)
	print(self.camera_world_bounds)
	factory.create('#factory', vmath.vector3(0, 0, 0))
	factory.create('#factory', vmath.vector3(0, 640, 0))
	pprint(self.tiles)
	self.SPEED = 40
	msg.post('.', 'start_camera')
	for _,v in ipairs({"move_up", "move_down", "move_left", "move_right", "up_idle", "down_idle", "left_idle", "right_idle"}) do
		self[v] = hash(v)
	end
	self.walking = false
end
function update(self, dt)
	self.dt = dt
	update_camera_bounds(self)
end
function linear_search(data, value)
	for i,v in pairs(data) do
		if v == value then
			return i
		end
	end
	return -1
end
function update_camera_bounds(self)
	self.camera_world_bounds.x = camera.screen_to_world(go.get_id('camera'), vmath.vector3(0, 0, 0)).x
	self.camera_world_bounds.y = camera.screen_to_world(go.get_id('camera'), vmath.vector3(0, 0, 0)).y
	self.camera_world_bounds.w = camera.screen_to_world(go.get_id('camera'), vmath.vector3(960, 0, 0)).x
	self.camera_world_bounds.z = camera.screen_to_world(go.get_id('camera'), vmath.vector3(0, 640, 0)).y
end
function on_message(self, message_id, message, sender)
	if message_id == hash('start_camera') then
		camera.follow(go.get_id('camera'), go.get_id(), {})
	end
end
function on_input(self, action_id, action)
	if action_id == hash("Up") and (self.walking == false or self.walking == 'up') then
		local direction_vector = vmath.vector3(0,10,0)*self.SPEED
		local new_pos = go.get_position() + direction_vector * self.dt
		go.set_position(new_pos)
		if self.walking == false then
			self.walking = 'up'
			sprite.play_flipbook('#sprite', self.move_up)
		elseif action.released and self.walking == 'up' then
			self.walking = false
			sprite.play_flipbook('#sprite', self.up_idle)
		end
	elseif action_id == hash("Left") and (self.walking == false or self.walking == 'left') then
		local direction_vector =  vmath.vector3(-10,0,0)*self.SPEED
		local new_pos = go.get_position() + direction_vector * self.dt
		go.set_position(new_pos)
		if self.walking == false then
			self.walking = 'left'
			sprite.play_flipbook('#sprite', self.move_left)
		elseif action.released and self.walking == 'left' then
			self.walking = false
			sprite.play_flipbook('#sprite', self.left_idle)
		end
	elseif action_id == hash("Right") and (self.walking == false or self.walking == 'right') then
		local direction_vector =  vmath.vector3(10,0,0)*self.SPEED
		local new_pos = go.get_position() + direction_vector * self.dt
		go.set_position(new_pos)
		if self.walking == false then
			self.walking = 'right'
			sprite.play_flipbook('#sprite', self.move_right)
		elseif action.released and self.walking == 'right' then
			self.walking = false
			sprite.play_flipbook('#sprite', self.right_idle)
		end
	elseif action_id == hash("Down") and (self.walking == false or self.walking == 'down') then
		local direction_vector =  vmath.vector3(0,-10,0)*self.SPEED
		local new_pos = go.get_position() + direction_vector * self.dt
		go.set_position(new_pos)
		if self.walking == false then
			self.walking = 'down'
			sprite.play_flipbook('#sprite', self.move_down)
		elseif action.released and self.walking == 'down' then
			self.walking = false
			sprite.play_flipbook('#sprite', self.down_idle)
		end
	end
end